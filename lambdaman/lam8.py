from ir import *
from evaluate import *

# problem 8
grid8 = '''
###################################################################################################
#.................................................................................................#
#.###############################################################################################.#
#.#.............................................................................................#.#
#.#.###########################################################################################.#.#
#.#.#.........................................................................................#.#.#
#.#.#.#######################################################################################.#.#.#
#.#.#.#.....................................................................................#.#.#.#
#.#.#.#.###################################################################################.#.#.#.#
#.#.#.#.#.................................................................................#.#.#.#.#
#.#.#.#.#.###############################################################################.#.#.#.#.#
#.#.#.#.#.#.............................................................................#.#.#.#.#.#
#.#.#.#.#.#.###########################################################################.#.#.#.#.#.#
#.#.#.#.#.#.#.........................................................................#.#.#.#.#.#.#
#.#.#.#.#.#.#.#######################################################################.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.....................................................................#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.###################################################################.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.................................................................#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.###############################################################.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.............................................................#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.###########################################################.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.........................................................#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#######################################################.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.....................................................#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.###################################################.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.................................................#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.###############################################.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.............................................#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.###########################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.........................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#######################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.....................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###############################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.............................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###########################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.........................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#######################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.....................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###############.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.............#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###########.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.........#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#######.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.....#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.###.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#L#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.......#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#########.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...........#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#############.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...............#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.......................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#########################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...........................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#############################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...............................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#...................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#####################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.......................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#.#########################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#...........................................#.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#.#############################################.#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#...............................................#.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#.#################################################.#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#...................................................#.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.#####################################################.#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#.......................................................#.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#.#########################################################.#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#...........................................................#.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#.#############################################################.#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#...............................................................#.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#.#################################################################.#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#...................................................................#.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.#####################################################################.#.#.#.#.#.#.#.#
#.#.#.#.#.#.#.......................................................................#.#.#.#.#.#.#.#
#.#.#.#.#.#.#########################################################################.#.#.#.#.#.#.#
#.#.#.#.#.#...........................................................................#.#.#.#.#.#.#
#.#.#.#.#.#############################################################################.#.#.#.#.#.#
#.#.#.#.#...............................................................................#.#.#.#.#.#
#.#.#.#.#################################################################################.#.#.#.#.#
#.#.#.#...................................................................................#.#.#.#.#
#.#.#.#####################################################################################.#.#.#.#
#.#.#.......................................................................................#.#.#.#
#.#.#########################################################################################.#.#.#
#.#...........................................................................................#.#.#
#.#############################################################################################.#.#
#...............................................................................................#.#
#################################################################################################.#
..................................................................................................#
###################################################################################################
'''

y = [
    Lambda(0),
    BApply(),
    Lambda(1), BApply(), Var(0), BApply(), Var(1), Var(1),
    Lambda(1), BApply(), Var(0), BApply(), Var(1), Var(1),
]

move_rec = [
    Lambda(4),
    Lambda(0), Lambda(1),
    If(), BEq(), Var(0), Int([0]),
    Str(''),
    BCat(), Var(1),
    BApply(),
    BApply(), Var(4),
    BMinus(), Var(0), Int([1]),
    Var(1),
]

# dir_str = [
#     Lambda(0),
#     If(), BEq(), Var(0), Int([0]), Str('D'),
#     If(), BEq(), Var(0), Int([1]), Str('U'),
#     If(), BEq(), Var(0), Int([2]), Str('R'),
#     Str('L'),
# ]

# v6 = y move_rec
f_rec = [
    Lambda(4),
    Lambda(0), # i
    If(), BEq(), Var(0), Var(5), Str(''), # i == n
    BApply(), Lambda(1), # j = 4*i+2
    BCat(), BApply(), BApply(), Var(6),
    Var(1), Str('D'),
    BCat(), BApply(), BApply(), Var(6),
    Var(1), Str('L'),
    BCat(), BApply(), BApply(), Var(6),
    BPlus(), Var(1), Int([2]), Str('U'),
    BCat(), BApply(), BApply(), Var(6),
    BPlus(), Var(1), Int([2]), Str('R'),
    BApply(), Var(4), BPlus(), Var(0), Int([1]),
    # j = 4*i+2
    BPlus(), Int([2]), BMul(), Int([4]), Var(0),
]

f_soln = [
    BApply(), Lambda(7), # v7 = y
    BApply(), Lambda(6), # v6 = y move_rec
    BApply(), Lambda(5), # v5 = n
    BApply(), BApply(), Var(7),
] + f_rec + [
    Int([0]),
    Int([25]), # v5 = n
    BApply(), Var(7), # v6
] + move_rec + y # v7
f_soln_prog = parse_all(f_soln)
soln = eval_lazy(f_soln_prog, Bindings())
print(soln())

def solve_lam8(grid, f):
    grid = list(map(lambda x: list(x.strip()), grid.strip().split('\n')))
    i, j = 0, 0
    for x,row in enumerate(grid):
        for y,c in enumerate(row):
            if c == 'L':
                i, j = x, y
                break
    print(f'Found {i} {j}')
    width, height = len(grid[0]), len(grid)
    def move(d):
        nonlocal i, j
        if d == 'R':
            if (j < width-1) and grid[i][j+1] != '#':
                grid[i][j] = ' '
                grid[i][j+1] = 'L'
                j += 1
        elif d == 'L':
            if (j > 0) and grid[i][j-1] != '#':
                grid[i][j] = ' '
                grid[i][j-1] = 'L'
                j -= 1
        elif d == 'U':
            if (i > 0) and grid[i-1][j] != '#':
                grid[i][j] = ' '
                grid[i-1][j] = 'L'
                i -= 1
        else:
            assert d == 'D'
            if (i < height-1) and grid[i+1][j] != '#':
                grid[i][j] = ' '
                grid[i+1][j] = 'L'
                i += 1
    soln = f()
    for c in soln:
        move(c)
    print('\n'.join([''.join(row) for row in grid]))
    return all(map(lambda row: all(map(lambda c: c != '.', row)), grid))

ret = solve_lam8(grid8, soln)
print('Solved:', ret)
print(enc([BCat(), Str('solve lambdaman8 ')] + f_soln))
