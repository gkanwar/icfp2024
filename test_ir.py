from ir import *

def test_str():
    message = Str.dec('SB%,,/}Q/2,$_')
    assert message.value == 'Hello World!'
    resp = (
        '''SB%,,/}!.$}7%,#/-%}4/}4(%}M#(//,}/&}4(%}</5.$}P!2)!",%_~~<%'''
        '''&/2%}4!+).'}!}#/523%j}7%}35''%34}4(!4}9/5}(!6%}!},//+}!2/5.'''
        '''$l}S/5e2%}./7},//+).'}!4}4(%}u).$%8wl}N/}02!#4)#%}9/52}#/--'''
        '''5.)#!4)/.}3+),,3j}9/5}#!.}53%}/52}u%#(/w}3%26)#%l}@524(%2-/'''
        '''2%j}4/}+./7}(/7}9/5}!.$}/4(%2}345$%.43}!2%}$/).'j}9/5}#!.},'''
        '''//+}!4}4(%}u3#/2%"/!2$wl~~;&4%2},//+).'}!2/5.$j}9/5}-!9}"%}'''
        '''!$-)44%$}4/}9/52}&)234}#/523%3j}3/}-!+%}352%}4/}#(%#+}4()3}'''
        '''0!'%}&2/-}4)-%}4/}4)-%l}C.}4(%}-%!.4)-%j})&}9/5}7!.4}4/}02!'''
        '''#4)#%}-/2%}!$6!.#%$}#/--5.)#!4)/.}3+),,3j}9/5}-!9}!,3/}4!+%'''
        '''}/52}u,!.'5!'%y4%34wl~'''
    )
    assert Str.dec(resp).enc() ==  resp

def test_str_int_conversion():
    assert s2i(i2s(1234567890)) == 1234567890

def test_enc_dec():
    prog = '''B$ B$ L# L$ v# B. SB%,,/ S}Q/2,$_ IK'''
    assert enc(dec(prog)) == prog
    prog = (
        '''B$ B$ L" B$ L# B$ v" B$ v# v# L# B$ v" B$ v# v# L" L# ? '''
        '''B= v# I! I" B$ L$ B+ B$ v" v$ B$ v" v$ B- v# I" I%'''
    )
    assert enc(dec(prog)) == prog
    prog = (
        '''? B= B$ B$ B$ B$ L$ L$ L$ L# v$ I" I# I$ I% I$ ? B= B$ L$ '''
        '''v$ I+ I+ ? B= BD I$ S4%34 S4 ? B= BT I$ S4%34 S4%3 ? B= B. '''
        '''S4% S34 S4%34 ? U! B& T F ? B& T T ? U! B| F F ? B| F T ? '''
        '''B< U- I$ U- I# ? B> I$ I# ? B= U- I" B% U- I$ I# ? B= I" B% '''
        '''I( I$ ? B= U- I" B/ U- I$ I# ? B= I# B/ I( I$ ? B= I' B* I# '''
        '''I$ ? B= I$ B+ I" I# ? B= U$ I4%34 S4%34 ? B= U# S4%34 I4%34 '''
        '''? U! F ? B= U- I$ B- I# I& ? B= I$ B- I& I# ? B= S4%34 S4%34 '''
        '''? B= F F ? B= I$ I$ ? T B. B. SM%,&k#(%#+}IEj}3%.$}z3/,6%},'''
        '''!.'5!'%y4%34} U$ B+ I# B* I$> I1~s:U@ Sz}4/}#,!)-}0/).43}&/'''
        '''2})4 S)&})3}./4}#/22%#4 S").!29}q})3}./4}#/22%#4 S").!29}q}'''
        ''')3}./4}#/22%#4 S").!29}q})3}./4}#/22%#4 S").!29}k})3}./4}#/'''
        '''22%#4 S5.!29}k})3}./4}#/22%#4 S5.!29}_})3}./4}#/22%#4 S5.!2'''
        '''9}a})3}./4}#/22%#4 S5.!29}b})3}./4}#/22%#4 S").!29}i})3}./4'''
        '''}#/22%#4 S").!29}h})3}./4}#/22%#4 S").!29}m})3}./4}#/22%#4 '''
        '''S").!29}m})3}./4}#/22%#4 S").!29}c})3}./4}#/22%#4 S").!29}c'''
        '''})3}./4}#/22%#4 S").!29}r})3}./4}#/22%#4 S").!29}p})3}./4}#'''
        '''/22%#4 S").!29}{})3}./4}#/22%#4 S").!29}{})3}./4}#/22%#4 S"'''
        ''').!29}d})3}./4}#/22%#4 S").!29}d})3}./4}#/22%#4 S").!29}l})'''
        '''3}./4}#/22%#4 S").!29}N})3}./4}#/22%#4 S").!29}>})3}./4}#/2'''
        '''2%#4 S!00,)#!4)/.})3}./4}#/22%#4 S!00,)#!4)/.})3}./4}#/22%#4'''
    )
    assert enc(dec(prog)) == prog

def test_multi_digit_binds():
    prog = '''L## v##'''
    tokens = dec(prog)
    assert isinstance(tokens[0], Lambda)
    assert tokens[0].bind == 2*94+2
    assert isinstance(tokens[1], Var)
    assert tokens[1].bind == 2*94+2
