### process eff7 SAT problem into CNF input file

sat = '''
(B| U! v18 U! v15)
(B| U! v14 U! v9)
(B| B| U! v19 v37 v12)
(U! v39)
(B| U! v20 v18)
(B| B| U! v8 v16 U! v24)
(B| U! v29 U! v39)
(B| U! v2 v19)
(v15)
(B| B| U! v37 v19 U! v6)
(B| v25 U! v23)
(B| B| U! v17 v40 v21)
(B| B| U! v23 v35 v24)
(B| U! v30 U! v28)
(v15)
(B| B| U! v37 v19 v6)
(B| U! v3 U! v11)
(B| U! v35 U! v3)
(B| B| U! v29 v39 v22)
(B| U! v27 U! v10)
(B| v28 U! v8)
(B| U! v4 v39)
(B| v10 v26)
(B| B| v22 v14 v15)
(U! v13)
(B| B| v36 v28 U! v35)
(B| B| U! v8 v16 v24)
(B| B| U! v7 v3 U! v40)
(B| B| v22 v14 v15)
(U! v13)
(B| B| U! v8 v16 v24)
(B| B| U! v19 v37 v12)
(B| v10 U! v26)
(B| U! v20 U! v18)
(B| U! v8 U! v16)
(B| B| U! v3 v11 U! v23)
(B| U! v16 v37)
(B| U! v38 U! v11)
(B| B| U! v31 v13 v14)
(B| U! v33 v19)
(B| B| U! v14 v9 U! v29)
(B| v6 v16)
(B| B| v36 v28 v35)
(B| U! v19 U! v37)
(B| U! v5 v6)
(B| v10 v26)
(B| B| U! v3 v11 v23)
(B| B| v26 v37 U! v16)
(B| B| v22 v14 U! v15)
(B| B| v25 v23 v38)
(B| v36 U! v28)
(B| U! v35 v3)
(B| B| U! v34 v35 U! v37)
(B| U! v5 U! v6)
(B| U! v33 U! v19)
(B| B| U! v17 v40 v21)
(B| B| U! v30 v28 v4)
(B| B| U! v34 v35 v37)
(B| B| v28 v8 v29)
(U! v21)
(B| B| U! v18 v15 v39)
(v40)
(B| B| U! v3 v11 v23)
(B| U! v17 U! v40)
(B| U! v35 v3)
(B| U! v33 v19)
(B| B| v25 v23 U! v38)
(B| U! v27 v10)
(B| B| v36 v28 v35)
(B| B| U! v7 v3 v40)
(B| U! v11 v35)
(B| v6 v16)
(B| B| U! v30 v28 v4)
(B| U! v11 U! v35)
(B| U! v32 v19)
(B| U! v37 U! v19)
(B| v26 U! v37)
(B| B| U! v30 v28 U! v4)
(U! v21)
(B| U! v20 v18)
(B| U! v9 v31)
(B| B| v28 v8 v29)
(B| B| U! v31 v13 U! v14)
(B| B| U! v24 v32 v35)
(B| v12 v16)
(B| B| U! v29 v39 v22)
(B| B| U! v14 v9 v29)
(U! v39)
(B| U! v4 U! v39)
(B| B| U! v37 v19 v6)
(B| U! v23 U! v35)
(B| B| U! v29 v39 U! v22)
(B| U! v5 v6)
(v40)
(B| B| v25 v23 v38)
(B| U! v2 v19)
(B| v12 v16)
(B| B| U! v23 v35 v24)
(B| U! v31 U! v13)
(B| U! v34 U! v35)
(B| U! v32 v19)
(B| B| U! v24 v32 v35)
(B| B| v26 v37 v16)
(B| U! v38 v11)
(B| U! v16 v37)
(B| B| U! v7 v3 v40)
(B| U! v4 v39)
(B| U! v7 U! v3)
(B| B| U! v24 v32 U! v35)
(B| B| U! v34 v35 v37)
(B| U! v11 v35)
(v1)
(B| U! v27 v10)
(B| B| U! v23 v35 U! v24)
(B| B| U! v18 v15 U! v39)
(B| B| U! v19 v37 U! v12)
(B| B| v26 v37 v16)
(B| v6 U! v16)
(B| B| U! v17 v40 U! v21)
(B| U! v9 U! v31)
(B| U! v32 U! v19)
(B| U! v38 v11)
(B| U! v9 v31)
(B| B| U! v14 v9 v29)
(B| B| U! v18 v15 v39)
(B| v12 U! v16)
(B| U! v16 U! v37)
(B| v22 U! v14)
(B| B| v28 v8 U! v29)
(v1)
(B| U! v24 U! v32)
(B| U! v2 U! v19)
(B| B| U! v31 v13 v14)
'''

def write_problem_file():
    out = []
    for line in sat.strip().split('\n'):
        assert line[0] == '(' and line[-1] ==')'
        line = line[1:-1]
        nB = 0
        b_str = 'B| '
        while line.startswith(b_str):
            line = line[len(b_str):]
            nB += 1
        assert line.count('B') == 0
        nv = line.count('v')
        assert nv == nB+1, f'{nv=} {nB=} {line}'
        line = str.replace(str.replace(line, 'U! ', '-'), 'v', '')
        assert line.count(' ') == nv-1
        out.append(line)

    # with open('eff7.cnf', 'w') as f:
    with open('eff7.dpll', 'w') as f:
        # f.write(f'p cnf 40 {len(out)}\n')
        for line in out:
            # f.write(line + ' 0\n')
            f.write(line + '\n')

def produce_soln():
    soln = '15 12 6 25 40 28 22 10 26 36 1 -39 -18 -20 -4 -13 -21 -17 -14 -31 -9 -29 -19 -2 -33 -32 -8 -30 -37 -16 -5 -27 -23 -3 -7 -35 -34 -11 -24 -38'
    out = 0
    assert len(soln.strip().split()) == 40, \
        f'expect 40 bits to be assigned got {len(soln)}'
    for k in soln.strip().split():
        if k[0] == '-':
            continue
        out |= 1 << (int(k)-1)
    print(out)
        
if __name__ == '__main__':
    produce_soln()
